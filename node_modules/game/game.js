var square_size = 25;
var max_cols = 10;
var max_rows = 14;
var stage = null;

var grid = [
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],
	[1,1,0,0,0,0,0,0,0,0,0,0,0,1,1],
	[1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],
	[1,1,1,1,0,0,0,0,0,0,0,1,1,1,1],
	[1,1,1,1,1,0,0,0,0,0,1,1,1,1,1],
	[1,1,1,1,1,1,0,0,0,1,1,1,1,1,1],
	[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]
]

function draw_grid(){
	stage = document.getElementById('stage');
	
	for(var y_index in grid)
	{
		for(var x_index in grid[y_index])
		{
			var add_tile_class = (grid[y_index][x_index] == 0) ? 'air' : 'ground';
			stage.innerHTML += '<div class="tile '+ add_tile_class +'" style="width:'+ square_size +'px;height:'+ square_size +'px;top:'+ (y_index*square_size) +'px;left:'+ (x_index*square_size) +'px;"></div>';
		}
	}
}

function Man(name){
	this.config = {
		name : name,
		health : 100,
		max_health : 100,
		y : 0,
		x : 0,
		shape : [ [1],[1] ],
		direction : 1
	}
	
	var players_layer = document.getElementById('players');
	
	
	var self = this;
	
	this.initialize = function(){
		self.update();
	}
	
	this.draw = function(){
		players_layer.innerHTML = ''; // first thing to do in multiplayer mode
		
		// in multiplayer mode, loop through all the players then render according to config;
		var player_sprite = '';
		
		for(var y_coord in self.config.shape)
		{
			for(var x_coord in self.config.shape[y_coord])
			{
				if(self.config.shape[y_coord][x_coord] == 1){
					var add_player_class = (y_coord == 0) ? 'head' : 'body';
					player_sprite += '<div class="player '+ add_player_class +'" style="width:'+ square_size +'px;height:'+ square_size +'px; top:'+ ((square_size * self.config.y) + (square_size * y_coord)) +'px; left:'+ (square_size * self.config.x + (square_size * x_coord)) +'px;"></div>';
				}
			}
		}
		
		players_layer.innerHTML += player_sprite;
		
		setTimeout(self.update, 5);
	}
	
	this.check_ground = function(){
		var ground_coord = grid.length - 1;
		for(var y_coord in grid)
		{
			if(grid[y_coord][self.config.x] > 0)
			{
				ground_coord = y_coord - 1; // offset for the player's body
				break;
			}
		}
		
		return ground_coord;
	};
	
	this.check_walls = function(direction){
		var colliding_tiles = [];
		
		for(var shape_y in self.config.shape)
		{
			if(grid[(parseInt(self.config.y) + parseInt(shape_y))][self.config.x + direction] > 0)
			{
				colliding_tiles.push(grid[shape_y][self.config.x + direction]);
				break;
			}
		}
		
		return (colliding_tiles.length == 0 && self.config.x + direction >= 0 && self.config.x + direction <= max_rows) ? false : true;
	}
	
	this.update = function(){
		if(self.config.y < parseInt(self.check_ground()) - 1)
			self.config.y += 1;
		self.draw(); // replace with an EMIT event
	}
	
	this.keydown = function(e){
		if((e.which == 65 || e.keyCode == 65) && self.check_walls(-1) == false)
		{
			self.config.direction = -1;
			self.config.x -= 1;
		}
			
		if((e.which == 68 || e.keyCode == 68) && self.check_walls(1) == false)
		{
			self.config.direction = 1;
			self.config.x += 1;
		}
		
		self.update();
	}
	
	this.keyup = function(e){
		if(e.which == 32 || e.keyCode == 32)
		{
			var scroll = new Scroll({
				x: self.config.x,
				y: self.config.y,
				direction: self.config.direction
			});
		}
		
		self.update();
	}
	
	this.initialize();
}

function get_timestamp(){
	var date = new Date();
	return date.getTime();
}

function Scroll(config){
	this.config = {
		name : 'scroll_'+ get_timestamp(),
		x : config.x,
		y: config.y,
		direction: config.direction,
		shape : [0],
		degree : 0
	}
	var self = this;
	var scrolls_layer = document.getElementById('scrolls');
	
	this.initialize = function(){
		var scroll_element = document.createElement('div');
		scroll_element.setAttribute('id', self.config.name);
		scrolls_layer.appendChild(scroll_element);
		
		self.update();
	}
	
	this.check_walls = function(direction){
		var colliding_tiles = [];
		
		// check collision with the stage boundaries or ground
		for(var shape_y in self.config.shape)
		{
			if(grid[(parseInt(self.config.y) + parseInt(shape_y))][self.config.x + direction] > 0)
			{
				colliding_tiles.push(grid[shape_y][self.config.x + direction]);
				break;
			}
		}
		
		// check collision to players
		
		return (colliding_tiles.length == 0 && self.config.x + direction >= 0 && self.config.x + direction <= max_rows) ? false : true;
	}
	
	this.draw = function(){
		var scroll_element = document.getElementById(self.config.name);
		var add_scroll_class = (self.config.direction > 0) ? 'move_right' : 'move_left';
		scroll_element.setAttribute('class', 'scroll '+ add_scroll_class);
		scroll_element.setAttribute('style', 'width:'+ square_size +'px;height:'+ square_size +'px;top:'+ (square_size * self.config.y) +'px;left:'+ (square_size * self.config.x) +'px;');
		
		scroll_element.style.webkitTransform = 'rotate('+ self.config.degree +'deg)'; 
		scroll_element.style.mozTransform    = 'rotate('+ self.config.degree +'deg)'; 
		scroll_element.style.msTransform     = 'rotate('+ self.config.degree +'deg)'; 
		scroll_element.style.oTransform      = 'rotate('+ self.config.degree +'deg)'; 
		scroll_element.style.transform       = 'rotate('+ self.config.degree +'deg)';
		setTimeout(self.update, 30)
	}
	
	this.remove_scroll = function(){
		var scroll_element = document.getElementById(self.config.name);
		scrolls_layer.removeChild(scroll_element);
	}
	
	this.update = function(){
		if(self.check_walls(self.config.direction) == false)
		{
			self.config.x += self.config.direction;
			self.config.degree += 30;
			
			self.draw(); // EMIT here
		}
		else
			self.remove_scroll();
	}
	
	this.initialize();
}

document.onkeydown = function(e){
	man.keydown(e);
}

document.onkeyup = function(e){
	man.keyup(e);
}